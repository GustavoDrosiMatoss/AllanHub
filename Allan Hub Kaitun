-- Allan Hub Configurado - Fluent Full GUI (auto-mapping, ASCII-only)

-- ========== Fluent Loader (RAW + fallback + stub) ==========
local function loadFluent()
    local ok, lib = pcall(function()
        return loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/main/Fluent.lua"))()
    end)
    if ok and lib then return lib end

    ok, lib = pcall(function()
        return loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
    end)
    if ok and lib then return lib end

    warn("[AllanHub] Nao foi possivel carregar Fluent; usando stub da UI.")
    local stub = {}
    function stub:CreateWindow()
        local w = {}
        function w:AddTab(_) 
            return {
                AddToggle=function()end,
                AddButton=function()end,
                AddDropdown=function()end,
                AddSlider=function()end
            }
        end
        return w
    end
    function stub:Notify(_) end
    stub.Options = {}
    return stub
end

local Fluent = loadFluent()
local Window = Fluent:CreateWindow({
    Title = "Allan Hub",
    SubTitle = "By Allan",
    TabWidth = 120,
    Size = UDim2.fromOffset(560, 420),
    Acrylic = true,
    Theme = "Dark"
})

-- ========== Tabs ==========
local Tabs = {
    Farm      = Window:AddTab({ Title = "Farm" }),
    Boss      = Window:AddTab({ Title = "Boss" }),
    Raids     = Window:AddTab({ Title = "Raids" }),
    Fruits    = Window:AddTab({ Title = "Frutas" }),
    Fighting  = Window:AddTab({ Title = "Fighting Styles" }),
    Mastery   = Window:AddTab({ Title = "Mastery" }),
    Swords    = Window:AddTab({ Title = "Swords" }),
    Materials = Window:AddTab({ Title = "Materiais" }),
    Teleport  = Window:AddTab({ Title = "Teleports" }),
    Stats     = Window:AddTab({ Title = "Stats" }),
    Config    = Window:AddTab({ Title = "Config" })
}

-- ========== Util ==========
local function Notify(title, content, duration)
    if Fluent and Fluent.Notify then
        Fluent:Notify({ Title = title or "Allan Hub", Content = content or "", Duration = duration or 4 })
    end
end

local ok_g, env = pcall(function() return getgenv() end)
if not ok_g or type(env) ~= "table" then env = _G end
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CommF = ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_")

-- cria toggle que liga/desliga variavel booleana e opcionalmente chama funcoes start/stop
local function bindToggle(tab, id, title, varName, startFnName, stopFnName, defaultValue)
    if env[varName] == nil and (not startFnName or type(env[startFnName]) ~= "function") then
        return
    end
    if env[varName] == nil then env[varName] = defaultValue == true end

    tab:AddToggle(id, {
        Title = title,
        Default = env[varName] == true,
        Callback = function(v)
            env[varName] = v
            if v and startFnName and type(env[startFnName]) == "function" then
                pcall(env[startFnName])
            elseif (not v) and stopFnName and type(env[stopFnName]) == "function" then
                pcall(env[stopFnName])
            end
            Notify(title, v and "Ativado" or "Desativado", 3)
        end
    })
end

-- botao simples que chama funcao
local function bindButton(tab, title, fnName, desc)
    if type(env[fnName]) ~= "function" then return end
    tab:AddButton({ Title = title, Description = desc or "", Callback = function()
        local ok, err = pcall(env[fnName])
        if not ok then warn("[AllanHub] erro em "..fnName..": "..tostring(err)) end
    end})
end

-- dropdown que escreve em variavel/ chama fn setter
local function bindDropdown(tab, id, title, options, varName, setterFnName)
    if (varName and env[varName] == nil) and (not setterFnName or type(env[setterFnName]) ~= "function") then
        return
    end
    tab:AddDropdown(id, {
        Title = title,
        Values = options,
        Multi = false,
        Default = options[1],
        Callback = function(choice)
            if varName then env[varName] = choice end
            if setterFnName and type(env[setterFnName]) == "function" then
                pcall(env[setterFnName], choice)
            end
        end
    })
end

-- slider que escreve em variavel/ chama fn setter
local function bindSlider(tab, id, title, min, max, default, step, varName, setterFnName)
    if (varName and env[varName] == nil) and (not setterFnName or type(env[setterFnName]) ~= "function") then
        return
    end
    tab:AddSlider(id, {
        Title = title,
        Min = min, Max = max, Default = default, Rounding = 0, Increment = step or 1,
        Callback = function(val)
            if varName then env[varName] = val end
            if setterFnName and type(env[setterFnName]) == "function" then
                pcall(env[setterFnName], val)
            end
        end
    })
end

-- ========== Farm ==========
bindToggle(Tabs.Farm, "AutoFarm", "Auto Farm Level", "AutoFarm", "StartAutoFarm", "StopAutoFarm", false)
bindToggle(Tabs.Farm, "AutoWorld", "Trocar Mundo Automatico", "AutoWorld", "StartAutoWorld", "StopAutoWorld", true)
bindToggle(Tabs.Farm, "AutoFarmBone", "Farm Bones", "AutoFarmBone", nil, nil, false)
bindToggle(Tabs.Farm, "AutoQuest", "Pegar Quest Automatico", "AutoQuest", nil, nil, true)
bindToggle(Tabs.Farm, "AutoHaki", "Auto Haki (Buso)", "AutoHaki", nil, nil, true)

-- Armas padrao
local weaponOptions = { "Melee", "Sword", "Gun" }
bindDropdown(Tabs.Farm, "WeaponType", "Tipo de Arma", weaponOptions, "SelectedWeaponType", "SetWeaponType")

-- ========== Boss ==========
bindToggle(Tabs.Boss, "AutoBoss", "Auto Farm Boss", "AutoBoss", "StartAutoBoss", "StopAutoBoss", false)
bindToggle(Tabs.Boss, "AutoQuestBoss", "Pegar Quest de Boss", "AutoQuestBoss", nil, nil, true)

-- ========== Raids / Awaken ==========
bindToggle(Tabs.Raids, "AutoRaid", "Auto Raid", "AutoRaid", "StartAutoRaid", "StopAutoRaid", false)
bindToggle(Tabs.Raids, "AutoAwaken", "Auto Awakening", "AutoAwaken", "StartAutoAwaken", "StopAutoAwaken", false)
bindDropdown(Tabs.Raids, "RaidChip", "Raid Chip", {"Flame","Ice","Quake","Light","Dark","String","Rumble","Magma","Buddha","Sand","Phoenix","Dough"}, "SelectedRaid", "SelectRaid")

-- ========== Frutas ==========
bindToggle(Tabs.Fruits, "FruitSniper", "Fruit Sniper (loja)", "FruitSniper", "StartFruitSniper", "StopFruitSniper", false)
bindToggle(Tabs.Fruits, "AutoStoreFruit", "Auto Guardar Frutas", "AutoStoreFruit", nil, nil, true)
bindToggle(Tabs.Fruits, "AutoBuyFruit", "Auto Comprar Frutas Aleatorias", "AutoBuyFruit", "StartAutoBuyFruit", "StopAutoBuyFruit", false)
bindToggle(Tabs.Fruits, "GrabSpawnedFruits", "Pegar Frutas no Chao", "GrabSpawnedFruits", "StartGrabFruits", "StopGrabFruits", false)

-- ========== Fighting Styles ==========
bindToggle(Tabs.Fighting, "AutoStyles", "Evoluir Styles ate God Human", "AutoStyles", "StartAutoStyles", "StopAutoStyles", true)
bindToggle(Tabs.Fighting, "AutoSuperhuman", "Auto Superhuman", "AutoSuperhuman", nil, nil, false)
bindToggle(Tabs.Fighting, "AutoElectricClaw", "Auto Electric Claw", "AutoElectricClaw", nil, nil, false)
bindToggle(Tabs.Fighting, "AutoSharkman", "Auto Sharkman Karate", "AutoSharkmanKarate", nil, nil, false)
bindToggle(Tabs.Fighting, "AutoDeathStep", "Auto Death Step", "AutoDeathStep", nil, nil, false)
bindToggle(Tabs.Fighting, "AutoGodHuman", "Auto God Human", "AutoGodHuman", nil, nil, false)

-- ========== Mastery ==========
bindToggle(Tabs.Mastery, "FarmMasteryMelee", "Farm Mastery (Melee)", "AutoFarmMasteryMelee", nil, nil, false)
bindToggle(Tabs.Mastery, "FarmMasterySword", "Farm Mastery (Sword)", "AutoFarmMasterySword", nil, nil, false)
bindToggle(Tabs.Mastery, "FarmMasteryGun", "Farm Mastery (Gun)", "AutoFarmMasteryGun", nil, nil, false)
bindToggle(Tabs.Mastery, "FarmMasteryFruit", "Farm Mastery (Fruit)", "AutoFarmMasteryFruit", nil, nil, false)

-- ========== Swords / Itens Especiais ==========
bindToggle(Tabs.Swords, "AutoSaber", "Auto Saber", "AutoSaber", "StartAutoSaber", "StopAutoSaber", false)
bindToggle(Tabs.Swords, "AutoPole", "Auto Pole (First/Second Form)", "AutoPole", nil, nil, false)
bindToggle(Tabs.Swords, "AutoRengoku", "Auto Rengoku", "AutoRengoku", nil, nil, false)
bindToggle(Tabs.Swords, "AutoTushita", "Auto Tushita", "AutoTushita", nil, nil, false)
bindToggle(Tabs.Swords, "AutoYama", "Auto Yama", "AutoYama", nil, nil, false)
bindToggle(Tabs.Swords, "AutoCDK", "Auto Cursed Dual Katana", "AutoCursedDualKatana", nil, nil, false)

-- ========== Materiais ==========
bindToggle(Tabs.Materials, "AutoMaterial", "Farm Materiais", "AutoMaterial", "StartAutoMaterial", "StopAutoMaterial", false)
bindDropdown(Tabs.Materials, "MaterialType", "Material", {"Leather","Scrap Metal","Angel Wings","Magma Ore","Fish Tail","Demonic Wisp","Vampire Fang","Mystic Droplet","Dragon Scale","Mini Tusk"}, "SelectedMaterial", "SelectMaterial")

-- ========== Teleports ==========
bindButton(Tabs.Teleport, "Ir para Second Sea", "GoSecondSea", "Viaja automaticamente (requer lvl 700+).")
bindButton(Tabs.Teleport, "Ir para Third Sea", "GoThirdSea", "Viaja automaticamente (requer lvl 1500+).")
Tabs.Teleport:AddButton({ Title = "Abandonar Quest", Description = "Abandona a quest atual", Callback = function()
    if CommF then pcall(function() CommF:InvokeServer("AbandonQuest") end) end
end})

-- ========== Stats ==========
bindToggle(Tabs.Stats, "AutoStats", "Auto Distribuir Pontos", "AutoStats", "StartAutoStats", "StopAutoStats", true)
bindDropdown(Tabs.Stats, "StatPriority", "Prioridade de Pontos", {"Melee > Defense", "Defense > Melee", "Balanced"}, "StatsMode", "SetStatsMode")
bindSlider(Tabs.Stats, "PointBatch", "Pontos por Ciclo", 1, 500, 50, 1, "StatsBatch", "SetStatsBatch")

-- ========== Config ==========
bindToggle(Tabs.Config, "TweenTP", "Teleport (Tween) Suave", "TweenTeleport", nil, nil, true)
bindToggle(Tabs.Config, "AntiAFK", "Anti AFK", "AntiAFK", "StartAntiAFK", "StopAntiAFK", true)
bindButton(Tabs.Config, "Recarregar Script", "ReloadScript", "Re-executa rotinas do Hub.")

Notify("Allan Hub", "Fluent GUI carregado (ASCII). Controles exibidos conforme funcoes/variaveis detectadas.", 6)
